/*Custom css properties*/

:root
{
   --primary :#59516e;
   --primary-var: #54416D;
   --secondary: #2B235A;
   --secondary-var:#31255A;
   --tertiary-var: #555;
   --white-ver1: hsla(0, 0%, 100%, 0.08);
   --white-ver2: hsla(0, 0%, 100%, 0.04);
   --outline: #3E3D40;
   --on-surface:#DDDAE5;
   --on-surface-variant: #7B7980; 
   --on-surface-variant-2: #B9B6BF;
   --surface: #1D1C1F;

     /* font weight */
    --weight-regular: 400;
    --weight-semiBold: 600;

    --title-1: 2rem;
    --title-2: 1.8rem;
    --title-3: 1.6rem;

   --shadow-1: 0px 1px 3px hsla(0, 0%, 0%, 0.5);

   --transition-short: 100ms ease;

}

/*MATERIAL ICON*/
@font-face {
    font-family: 'Material Symbols Rounded';
    font-style: normal;
    font-weight: 400;
    src: url(../font/material-symbol-rounded.woff2) format('woff2');
  }
  

.m-icon {
    font-family: 'Material Symbols Rounded';
    font-weight: normal;
    font-style: normal;
    font-size: 2.4rem;
    line-height: 1;
    letter-spacing: normal;
    text-transform: none;
    white-space: nowrap;
    word-wrap: normal;
    direction: ltr;
    font-feature-settings: 'liga';
    -webkit-font-feature-settings: 'liga';
    -webkit-font-smoothing: antialiased;
    height: 1em;
    width: 1em;
    overflow: hidden;
  }
  



/*-----------------------------------*\
  #ELEMENTS
\*-----------------------------------*/

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

li { list-style: none; }

a,
img,
span,
input,
button { display: block; }

body{
    background:#151617 ;
    overflow: hidden;
}

img { height: auto; }

input,
button {
  background: none;
  border: none;
  color: inherit;
  font: inherit; /*inherits the parent element properties*/
}

button { cursor: pointer; }

:focus-visible {
    outline: 2px solid var(--white);
    outline-offset: 2px;
  }

::-webkit-scrollbar {
    width: 6px;
    height: 6px; /* for horizontal scrollbar */
}
  
::-webkit-scrollbar-thumb {
    background-color: var(--white-alpha-8);
    border-radius: var(--radius-pill);
}


/*navbar*/
.header .btn-primary .span { display: none; }


.header-actions {
  display: flex;
  align-items: center;
}

.navbar{
  display:flex;
  justify-content: space-between;

}


.header-actions { gap: 16px; }

.header .btn-primary { padding-inline: 12px; }


.navbar .title
{
    font-size: 35px;
    font-weight: bold;
}

.navbar
{
    width:100%;
    margin-inline: auto;
    padding: 16px;
    background-color:  #090A0A;
}

.has-state { position: relative; }

.has-state:hover { box-shadow: var(--shadow-1); }

.has-state:is(:focus, :focus-visible) { box-shadow: none; }

.has-state::before {
  content: "";
  position: absolute;
  inset: 0;
  border-radius: inherit;
  clip-path: circle(100% at 50% 50%);
  transition: var(--transition-short);
}

.has-state:hover::before { background-color: var(--white-ver2); }

.has-state:is(:focus, :focus-visible)::before {
  background-color: var(--white-ver1);
  animation: ripple 250ms ease forwards;
}

@keyframes ripple {
    /*at 0% circle is too small to see*/
    /*at 100% cicle the circle envelopes the whole screen*/
    /*at 50% 50% means circle will start at center of the screen*/
    0% { clip-path: circle(0% at 50% 50%); }
    100% { clip-path: circle(100% at 50% 50%); }
  }
  
.btn-primary {
    background-color: var(--primary-var);
    color: black;
    height: 48px;
    line-height: 48px;
    max-width: max-content;
    display: flex;
    align-items: center;
    gap: 16px;
    padding-inline: 16px;
    border-radius: 8px;
  }

.btn-primary .span { font-weight: var(--weight-semiBold); }

.btn-primary[disabled] 
{
    background-color: var(--outline);
    color: var(--on-surface-variant);
    cursor: not-allowed;
}
  
.btn-primary[disabled]::before { display: none; }



.search-box{
    position: fixed;
    top:0;
    left:0;
    width:100%;
    height:100%;
    height: 100svh; /* for mobile browser */
    opacity: 0;
    visibility: hidden;
    z-index: 4;
    background-color: #151516;
    clip-path: circle(4% at calc(100% - 102px) 5%);

}

.search-box.active{
    opacity:1;
    visibility: visible;
    clip-path: circle(130% at 73% 5%);
}



.icon-btn 
{
    /*make btn background transparent*/
    background-color: var(--white-ver1);
    width: 48px;
    height: 48px;
    display: grid;
    /*place arrow in center*/
    place-items: center;
    /*make circular border*/
    border-radius: 50%;
}

/*create a grey line for the seacrch field*/
.search-wrapper
{
  position:relative;
  border-block-end: 1px solid var(--outline);
}

/*create a loading icon for the search*/
.search-wrapper::before {
  content: "";
  position: absolute;
  top:50%;
  right:16px;
  width: 24px;
  height: 24px;
  border: 3px solid var(--on-surface-variant);
  border-block-start-color: transparent;
  border-radius: 50%;
  animation: loading 500ms linear infinite;
  display:none;
}

@keyframes loading {
  0% { transform: translateY(-50%) rotate(0deg); }
  100% { transform: translateY(-50%) rotate(360deg); }
}
/*when search-wrapper has searching we display it*/
.search-wrapper:has(.searching)::before { display: block; }

.search-field {
  height: 80px;
  line-height: 80px;
  padding-inline: 56px 16px;
  outline: none;
}

.search-field::placeholder { color: var(--on-surface-variant-2); }

/*removes the x button in the input field*/
.search-field::-webkit-search-cancel-button { display: none; }

/*move the icons up to the search field*/
.search-wrapper .leading-icon 
{
   position:absolute;
   top:50%;
   left:28px;
   transform: translate(-50%, -50%);
}

/*> is a CSS combinator known as the child combinator. 
It selects only the direct child elements of the preceding selector.*/
.search-wrapper > .m-icon { display: none; }

.search-wrapper .icon-btn {
  background-color: transparent;
  box-shadow: none;
}

/*Now for the search results*/
.search-box .view-list { padding-block: 8px 16px; }

.search-box .view-item {
  position: relative;
  height: 56px;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  gap: 16px;
  padding-inline: 16px 24px;
}
.search-box .item-title{
  color:white;
}
.search-box .view-item :is(.m-icon, .item-subtitle) {
  color: var(--on-surface-variant);
}

/*
.search-box .view-item .item-link {
  position: absolute;
  inset: 0;
  box-shadow: none;
}
*/


/*Now for common classes*/
.container
{
    position: relative;
    display: grid;
    gap: 20px;
    height: 100%;
    max-width: 1600px;
    width: 100%;
    margin-inline: auto;
    padding: 16px;
    grid-template-columns: minmax(0, 1fr);
}

.card{
  background-color: var(--surface);
  color: var(--on-surface);
}

.card-lg {
  border-radius: 28px;
  padding: 20px;
}

.title-1 { font-size: var(--title-1); }

.title-2 {
  font-size: var(--title-2);
  margin-block-end: 12px;
}

.title-3 {
  font-size: var(--title-3);
  font-weight: var(--weight-semiBold);
}

.heading {
  color: white;
  font-size: 5.6rem;
  line-height: 1.1;
}




/*Current weather*/
.current-weather-card .wrapper{
  margin-block: 12px;
  display: flex;
  gap: 8px;
  align-items: center;

}

.current-weather-card .weather-icon {
  margin-inline: auto;
}

.current-weather-card .meta-list {
  margin-block-start: 16px;
  padding-block-start: 16px;
  border-block-start: 1px solid var(--outline);
}

.current-weather-card .meta-item {
  display: flex;
  align-items: center;
  gap: 8px;
}

/*5 days forecast*/
.forecast .title-2{
  color:white;
  margin-block-end: 14px;
  padding-left:10px;
}

.forecast-card :is(.card-item, .icon-wrapper) {
  display: flex;
  align-items: center;
}

.forecast-card .icon-wrapper { gap: 8px; }

.forecast-card .card-item > .label-1 {
  width: 100%;/*increases the width of the label elements*/
  text-align: right;/*shift the words in the element to the right*/
}

/*The CSS code you provided targets elements 
with the class "card-item" that are not the 
last child within their parent element
 with the class "forecast-card". 
 It applies a margin of 12 pixels at the bottom of these elements.
*/
.forecast-card .card-item:not(:last-child) { margin-block-end: 12px; }


